name: CI

# Trigger the workflow on push or pull request
on:
  workflow_dispatch:
    inputs:
      # see https://github.com/marketplace/actions/debugging-with-tmate
      debug_enabled:
        description: 'Run the build with tmate debugging enabled'
        type: boolean
  pull_request:
  push:
  schedule:
    # Every day at 2:30 AM UTC
    - cron: '30 2 * * *'

concurrency:
  # group by workflow and ref; the last slightly strange component ensures that for pull
  # requests, we limit to 1 concurrent job, but for the master branch we don't
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.ref != 'refs/heads/master' || github.run_number }}
  # Cancel intermediate builds, but only if it is a pull request build.
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

env:
  # default config flags: enable debug asserts
  CONFIGFLAGS: "--enable-debug"
  # CHERE_INVOKING=1 lets us start a 'login shell' (to set paths) in Windows without changing directory
  CHERE_INVOKING: 1

jobs:
  test:
    name: ${{ matrix.test-suites }} - ${{ matrix.extra }} - ${{ matrix.os }}
    # Don't run this twice on PRs for branches pushed to the same repository
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    defaults:
      run:
        shell: ${{ matrix.shell }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        shell: [bash]
        test-suites:
          [
            # base test: fast first test
            "testmockpkg",
          ]
        extra: [""]

        # add a few extra tests
        include:


          # this job also tests GAP without readline
          - os: macos-latest
            shell: bash
            test-suites: "testmockpkg"
            extra: "BOOTSTRAP_MINIMAL=yes"

    env:
      TEST_SUITES: ${{ matrix.test-suites }}

    steps:
      - uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - uses: gap-actions/setup-cygwin@v1
        if: ${{ runner.os == 'Windows' }}
        with:
          PKGS_TO_INSTALL: 'wget,git,gcc-g++,gcc-core,m4,libgmp-devel,make,automake,libtool,autoconf,autoconf2.5,zlib-devel,libreadline-devel,libmpc-devel,libmpfr-devel,xdg-utils,pkg-config'

      # There are two cygwin installs on github actions (ours,
      # and a preinstalled one which we can't use as not enough packages are installed.
      # Due to conflicts between these two, we cannot spawn new Cygwin processes and
      # then use IO between processes
      - if: ${{ runner.os == 'Windows' }}
        name: "Remove tests which do not work on github actions in Windows"
        run: |
               rm tst/testinstall/testunix/streamio.tst tst/testinstall/testunix/streams.tst

      - name: "Set up compiler and linker flags"
        run: |
               ${{ matrix.extra }}
               if [[ -n ${NO_COVERAGE} ]] ; then
                  echo "No coverage reporting"
               elif [ "$RUNNER_OS" == "Linux" ] ; then
                  # Passing -pthread makes linux gcc generate profiles in a thread-safe way,
                  # but that is very slow, so we force non-threadsafe generation.
                  echo "Use non-threadsafe coverage options, updating compiler and linker flags"
                  echo "CFLAGS=--coverage -O2 -g -fprofile-update=single" >> $GITHUB_ENV
                  echo "CXXFLAGS=--coverage -O2 -g -fprofile-update=single" >> $GITHUB_ENV
                  echo "LDFLAGS=--coverage -fprofile-update=single" >> $GITHUB_ENV
               else
                  echo "Using standard coverage options, updating compiler and linker flags"
                  echo "CFLAGS=--coverage -O2 -g" >> $GITHUB_ENV
                  echo "CXXFLAGS=--coverage -O2 -g" >> $GITHUB_ENV
                  echo "LDFLAGS=--coverage" >> $GITHUB_ENV
               fi

      - name: "Install dependencies"
        run: |
               ${{ matrix.extra }}
               echo "${{ matrix.extra }}" > extra.flags
               if [ "$RUNNER_OS" == "Linux" ]; then
                   packages=(${{ matrix.packages }})
                   if [[ $TEST_SUITES == *testbuildsys* ]] ; then
                       sudo apt-get remove libgmp-dev libreadline-dev zlib1g-dev
                   else
                       packages+=(libgmp-dev libreadline-dev zlib1g-dev expect)
                   fi
                   if [[ $TEST_SUITES == *testpackages* ]] ; then
                       packages+=(            # For:
                         4ti2                   # 4ti2Interface
                         libcdd-dev             # CddInterface
                         libcurl4-openssl-dev   # curlInterface
                         libfplll-dev           # float
                         libmpc-dev             # float
                         libmpfi-dev            # float
                         libmpfr-dev            # float
                         libncurses-dev         # browse
                         libzmq3-dev            # ZeroMQInterface
                         pari-gp                # alnuth
                         singular               # singular
                       )
                   fi
                   if [[ $TEST_SUITES == *makemanuals* ]] ; then
                       packages+=(
                         texlive-latex-base
                         texlive-latex-recommended
                         texlive-latex-extra
                         texlive-fonts-recommended
                       )
                   fi
                   if [[ $ABI == 32 ]] ; then
                       sudo dpkg --add-architecture i386
                       for i in "${!packages[@]}"; do
                           packages[$i]="${packages[$i]}:i386"
                       done
                       packages+=(gcc-multilib g++-multilib)
                   fi
                   sudo apt-get update
                   sudo apt-get install --no-install-recommends "${packages[@]}"
                   sudo apt-get install pkg-config
               elif [ "$RUNNER_OS" == "macOS" ]; then
                   brew install autoconf gmp zlib pkg-config
               fi
               python -m pip install gcovr

      # Setup ccache, to speed up repeated compilation of the same binaries
      # (i.e., GAP and the packages)
      - name: "Setup ccache"
        if: ${{ runner.os != 'Windows' }}
        uses: Chocobo1/setup-ccache-action@v1
        with:
          update_packager_index: false
          override_cache_key: ${{ runner.os }}-${{ hashFiles('extra.flags') }}-${{ github.ref }}
          override_cache_key_fallback: ${{ runner.os }}-${{ hashFiles('extra.flags') }}
      - name: "Workaround GitHub security concerns" # see https://github.com/gap-system/gap/issues/4861
        run: git config --global --add safe.directory $PWD
      - name: "Configure GAP"
        run: ${{ matrix.extra }} dev/ci-configure-gap.sh
      - name: "Build GAP"
        run: ${{ matrix.extra }} dev/ci-build-gap.sh
      - name: "Download packages"
        run: ${{ matrix.extra }} dev/ci-download-pkgs.sh
      - name: "Setup tmate session"
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
      - name: "Run tests"
        run: ${{ matrix.extra }} dev/ci.sh ${{ matrix.test-suites }}
      - name: "Upload pdf manuals"
        if: ${{ contains(matrix.test-suites, 'makemanuals') }}
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: manuals-pdf
          path: |
            doc/dev/manual.pdf
            doc/hpc/manual.pdf
            doc/ref/manual.pdf
            doc/tut/manual.pdf
      - name: "Upload html manuals"
        if: ${{ contains(matrix.test-suites, 'makemanuals') }}
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: manuals-html
          path: |
            doc/*/*.html
            doc/*/*.css
            doc/*/*.js
      - name: "Gather coverage data"
        run: ${{ matrix.extra }} dev/ci-gather-coverage.sh
      - name: "Upload coverage data to Codecov"
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

